a<-avaiable.packages()
help(available.packages)
install.packages(KernSmooth)
install.packages('KernSmooth')
library(kernsmooth)
library(KernSmooth)
x<-list(list(1:4),b="b",a=c(1,2))
x
x(c(1,3))
x[c(1,3)]
x[[c(1,3)]]
x[[c(2,1)]]
x[[c(1,1)]]
x<-c(1,23,na,1)
x<-c(1:6,"na")
y<-("na","na",1:4)
y<-("na","na",1,2,3,4)
y<-c("na","na",1,2,3,4)
z<-rband(x,y)
z<-cband(x,y)
help(cband)
??cband
z<-cbind(x,y)
z<-rbind(x,y)
z
z<-cbind(x,y)
z
good<-complete.cases(z)
good
y<-(NA,NA,1,2,3,4)
??na
y<-c(NA,NA,1,2,3,4)
x<-c(1:6,na)
x<-c(1:6,NA)
z<-cbind(x,y)
z
good<-complete.cases(z)
good
z[good]
library(datasets)
data(iris)
?iris
iris
mean(iris[,1])
library(datasets)
data(mtcars)
mtcars
s<-split(mtcars,mtcars$cyl)
lapply(s,means(s$mpg))
lapply(s,mean(s$mpg))
lapply(s,mean(mpg))
lapply(s,colmeans
)
lapply(s, function(x) colmean(x[,"mpg"]))
lapply(s, function(x) colmeans(x[,"mpg"]))
lapply(s, function(x) mean(x[,"mpg"]))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
a<-sapply(split(mtcars$mpg, mtcars$cyl), mean)
a[1]-a[3]
debug(ls)
ls
?debug
??debug
n
q
q
exit
quit
install.packages("Shiny")
install.packages("shiny")
pnorm(0.95,mean=1100,sd=75)
qnorm(0.95,mean=1100,sd=75)
qnorm(0.95,mean=1100,sd=7.5)
ppois(10,15)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
f <- lm(y ~ x)
summary(f)
data(mtcars)
names(mtcars)
summary(lm(mtcars$mpg~mtcars$wt))
x<-mtcars$wt
y<-mtcars$mpg
fit<-lm(y ~ x)
predict(fit,data.frame(x=mean(x)), interval="confidence")
??mtcars
?mtcars
x<-mtcars$wt
y<-mtcars$mpg
fit<-lm(y ~ x)
predict(fit,data.frame(x=3, interval="confidence")
)
x<-mtcars$wt
y<-mtcars$mpg
fit<-lm(y ~ x)
predict(fit,data.frame(x=3), interval="confidence")
fit2 <- lm(y ~ I(x / 2))
tbl2 <- summary(fit2)$coefficients
mean <- tbl2[2,1]
se <- tbl2[2,2]
df <- fit2$df
#Two sides T-Tests
mean + c(-1,1) * qt(0.975, df=df) * se
fit3<-lm(y~0)
summary(fit3)
fit3_summary<-summary(fit3)
fit3_summary$rse
fit3_summary$residual
fit3_summary$residual^2
fitIntercept <- lm(mpg ~ 1, mtcars)
fitInterceptRes <- fitIntercept$residuals ^ 2
fitInterceptRes
length(fitInterceptRes)
names(fit3_summary)
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(predictors)
data(AlzheimerDisease)
View(predictors)
names(AlzheimerDisease)
data(AlzheimerDisease)
data(AlzheimerDisease)
names(diagnosis)
diagnosis
inTrain = createDataPartition(predictors$CompressiveStrength, p = 3/4)[[1]]
help(AlzheimerDisease)
??AlzheimerDisease
?AlzheimerDisease
data(concrete)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(testing)
index<-seq_along(1:nrows(training))
plot(index,training$CompressiveStrength)
index<-seq_along(1:nrow(training))
plot(index,training$CompressiveStrength)
??CUT2
??cut2
install.packages("Hmisc")
libary(Hmisc)
library(Hmisc)
??cut2
levels(training$age)
names(training)
levels(training$Age)
summary(training$Age)
str(traing$Age)
str(training$Age)
plot(index,training$CompressiveStrength,color=cut2(training$Age,g=5))
plot(index,training$CompressiveStrength,col=cut2(training$Age,g=5))
plot(index,training$CompressiveStrength,col=cut2(training$FlyAsh,g=5))
xnames <- colnames(concrete)[1:8]
featurePlot(x=training[, xnames], y=training$CompressiveStrength, plot="pairs")
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
tables(training$Superplasticizer)
table(training$Superplasticizer)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
??grep
names(training)
names<-names(training)
sum(grep("^[Ii][Ll]",names))
grep("^[Ii][Ll]",names)
names<-names(training)
selection<-grep("^[Ii][Ll]",names)
ss <- training[,grep('^[Ii][Ll]', x = names(training) )]
preProc <- preProcess(ss, method='pca', thresh=0.9,
outcome=training$diagnosis)
preProc$rotation
summary(preProc)
str(preProc)
ss <- training[,c(grep('^[Ii][Ll]', x = names(training) ),1)]
View(ss)
preProc <- preProcess(ss, method='pca', thresh=0.8,
outcome=training$diagnosis)
preProc$rotation
ss <- training[,grep('^[Ii][Ll]', x = names(training) )]
adData = data.frame(diagnosis,ss)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors[,grep("^IL",names(predictors))])
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
modelfit1<-train(diagnosis~.,data=training,method="glm")
predictions1<-predict(modelfit1,newdata=testing)
library(kernal)
install.packages("kernal")
install.packages("kernel")
install.packages("kernlab")
library(kernlab)
modelfit1<-train(diagnosis~.,data=training,method="glm")
install.packages('caret', dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
modelfit1<-train(diagnosis~.,data=training,method="glm")
predictions1<-predict(modelfit1,newdata=testing)
library(caret)
modelfit1<-train(diagnosis~.,data=training,method="glm")
predictions1<-predict(modelfit1,newdata=testing)
confusionMatrix(predictions1,testing$diagnosis)
preProc <- preProcess(adData, method='pca', thresh=0.8,
outcome=adData$diagnosis)
View(adData)
preProc <- preProcess(adData[,-1], method='pca', thresh=0.8,
outcome=adData$diagnosis)
preProc$rotation
setwd("~/Documents/R/Courses/Developing Data Products")
library("shiny")
navbarPage("Mtcars Dataset Visualizer", # multi-page user-interface that includes a navigation bar.
data(mtcars)
)
data(mtcars)
names(mtcars)
View(mtcars)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
??mtcars
table(mtcars$cyl)
mtcars<-cbind(rownames(mtcars),mtcars)
View(mtcars)
View(mtcars)
View(mtcars)
data(mtcars)
car<-rownames(mtcars)
mtcars<-cbind(car,mtcars)
View(mtcars)
str(mtcars$mpg)
summary(mtcars$mpg)
summary(mtcars$hp)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
str(mtcars$wt)
summary(mtcars$wt)
summary(mtcars$mpg)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
mpg<-c(12,22)
mtcars[mpg>=mpg2[1] & mpg<=mpg2[2],]
mpg2<-c(12,22)
mtcars[mpg>=mpg2[1] & mpg<=mpg2[2],]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
input<-list(mpg=c(1,33),hp=c(52,355),wt=c(1.5,5.5))
mtcars[mpg>=input$mpg[1] & mpg<=input$mpg[2]
& hp>=input$hp[1] & hp<=input$hp[2]
& wt>=input$wt[1] & wt<=input$wt[2]
,c(1,2,3,5,7,10)]
View(mtcars)
mtcars[mpg>=input$mpg[1] & mpg<=input$mpg[2]
& hp>=input$hp[1] & hp<=input$hp[2]
& wt>=input$wt[1] & wt<=input$wt[2]
,c(1,2,3,5,7,10)]
View(mtcars)
mtcars[hp==110,]
mtcars["hp"==110,]
mtcars[mtcars$hp==110,]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.package("rcharts")
install.packages("rCharts")
library(rCharts)
install.packages("rcharts")
install.packages("rchart")
install.packages("rChart")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
modfit<-train(mpg~cyl+hp+wt+am,data=mtcars,method="glm")
pred<-predict(modfit,mtcars[1:10,])
library(caret)
library(kernlab)
modfit<-train(mpg~cyl+hp+wt+am,data=mtcars,method="glm")
pred<-predict(modfit,mtcars[1:10,])
pred
plot(mtcars[1:10,2],pred)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
p <- ggplot(mtcars, aes(mpg, wt))
p + geom_point(colour="grey50", size = 4) + geom_point(aes(colour = cyl))
p + aes(shape = factor(cyl)) +
geom_point(aes(colour = factor(cyl)), size = 4) +
geom_point(colour="grey90", size = 1.5)
p + geom_point(colour="black", size = 4.5) +
geom_point(colour="pink", size = 4) +
geom_point(aes(shape = factor(cyl)))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp(displayMode='showcase')
exit
